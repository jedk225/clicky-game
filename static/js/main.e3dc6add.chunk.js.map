{"version":3,"sources":["components/jumbotron/jumbotron.js","components/MemoryCard/MemoryCard.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","MemoryCard","props","onClick","imageClick","alt","name","src","image","Navbar","class","href","id","score","App","state","players","clickedPlayer","event","currentPlayer","target","playerPreviouslySelected","_this","indexOf","alert","setState","player","sort","b","Math","random","concat","console","log","_this2","this","components_Navbar_Navbar","jumbotron_jumbotron","map","components_MemoryCard_MemoryCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u7DAceA,eAXG,kBAEdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,oBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,yGCKKC,SARE,SAAAC,GAAK,OACpBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOG,QAASD,EAAME,YACnCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKM,IAAKH,EAAMI,KAAMC,IAAKL,EAAMM,mBCO1BC,SAZA,SAAAP,GAAK,OACpBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACfH,EAAAC,EAAAC,cAAA,KAAGW,MAAM,eAAeC,KAAK,0CAA7B,eAEEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BY,GAAG,sBAC3Cf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,UAA6BE,EAAMW,MAAMhB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,mBCkHhCc,6MAlHbC,MAAQ,CACNC,UACAC,cAAe,GACfJ,MAAO,KAITT,WAAa,SAAAc,GACX,IAAMC,EAAgBD,EAAME,OAAOf,IAC7BgB,EAA2BC,EAAKP,MAAME,cAAcM,QAAQJ,IAAkB,EAEpF,OAAQE,GACN,KAAKA,EACLG,MAAML,GAEJG,EAAKG,SAAS,CACZC,OAAQJ,EAAKP,MAAMC,QAAQW,KAAM,SAAC7B,EAAG8B,GACnC,MAAO,GAAMC,KAAKC,WAEpBb,cAAeK,EAAKP,MAAME,cAAcc,OACtCZ,GAEFN,MAAOS,EAAKP,MAAMF,MAAQ,IAE5B,MACF,QACES,EAAKG,SAAS,CACZC,OAAQJ,EAAKP,MAAMC,QAAQW,KAAK,SAAC7B,EAAG8B,GAClC,MAAO,GAAMC,KAAKC,WAEpBb,cAAe,GACfJ,MAAO,IAETW,MAAML,GACNK,MAAM,SAEV,OAAQF,EAAKP,MAAMF,OACjB,KAAK,GACHW,MAAM,UACNF,EAAKG,SAAS,CACZC,OAAQJ,EAAKP,MAAMC,QAAQW,KAAK,SAAC7B,EAAG8B,GAClC,MAAO,GAAMC,KAAKC,WAEpBb,cAAe,GACfJ,MAAO,IAET,MACF,QACEmB,QAAQC,IAAIX,EAAKP,MAAMF,iFA6CpB,IAAAqB,EAAAC,KACP,OACEtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZmC,KAAKpB,MAAMC,QAAQsB,IAAI,SAAAZ,GAAM,OAC5B7B,EAAAC,EAAAC,cAACwC,EAAD,CACEnC,WAAY8B,EAAK9B,WACjBQ,GAAIc,EAAOd,GACX4B,IAAKd,EAAOd,GACZJ,MAAOkB,EAAOlB,mBA1GViC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e3dc6add.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./jumbotron.css\";\n\nconst Jumbotron = () => (\n\n    <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n            <h1 className=\"display-4\">Rams Memory Game</h1>\n            <p className=\"lead\">Try to click each and every player just once. If you click a player twice in one round, you lose.</p>\n        </div>\n    </div>\n\n)\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./MemoryCard.css\";\n\n\n//pass the image into each card so all 12 are rendered\nconst MemoryCard = props => (\n    <div className=\"card\" onClick={props.imageClick}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n  \n  export default MemoryCard;","import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n<a class=\"navbar-brand\" href=\"https://github.com/jedk225/clicky-game\">Clicky Game</a>\n\n  <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n    <div className=\"navbar-nav ml-auto\">\n      <p className=\"score\">Score: {props.score}<span className=\"sr-only\">(current)</span></p>\n    </div>\n  </div>\n</nav>\n)\n\nexport default Navbar;","import React, { Component } from 'react';\nimport './App.css';\nimport Jumbotron from './components/jumbotron/jumbotron';\nimport MemoryCard from \"./components/MemoryCard\";\nimport players from \"./players.json\";\nimport Navbar from './components/Navbar';\n\nclass App extends Component {\n\n  state = {\n    players,\n    clickedPlayer: [],\n    score: 0\n  };\n\n  //when you click on a card the player is taken out of the array\n  imageClick = event => {\n    const currentPlayer = event.target.alt;\n    const playerPreviouslySelected = this.state.clickedPlayer.indexOf(currentPlayer) > -1;\n\n    switch (playerPreviouslySelected) {\n      case playerPreviouslySelected:\n      alert(currentPlayer)\n\n        this.setState({\n          player: this.state.players.sort( (a, b) =>  {\n            return 0.5 - Math.random();\n          }),\n          clickedPlayer: this.state.clickedPlayer.concat(\n            currentPlayer\n          ),\n          score: this.state.score + 1\n        });\n        break;\n      default:\n        this.setState({\n          player: this.state.players.sort((a, b) =>  {\n            return 0.5 - Math.random();\n          }),\n          clickedPlayer: [],\n          score: 0\n        });\n        alert(currentPlayer)\n        alert(\"loser\");\n    }\n    switch (this.state.score) {\n      case 12:\n        alert(\"Winner\");\n        this.setState({\n          player: this.state.players.sort((a, b) =>  {\n            return 0.5 - Math.random();\n          }),\n          clickedPlayer: [],\n          score: 0\n        });\n        break;\n      default:\n        console.log(this.state.score);\n    }\n\n\n    // if (playerPreviouslySelected) {\n    //   this.setState({\n    //     player: this.state.players.sort(function (a, b) {\n    //       return 0.5 - Math.random();\n    //     }),\n    //     clickedPlayer: [],\n    //     score: 0\n    //   });\n    //   alert(this.state.score)\n    //   alert(\"You lose. Play again?\");\n    // }\n    // else if (!playerPreviouslySelected) {\n    //   alert(this.state.score)\n    //   this.setState({\n    //     player: this.state.players.sort(function (a, b) {\n    //       return 0.5 - Math.random();\n    //     }),\n    //     clickedPlayer: this.state.clickedPlayer.concat(\n    //       currentPlayer\n    //     ),\n    //     score: this.state.score + 1\n    //   });\n    // }\n\n    // if (this.state.score === 12) {\n    //   alert(this.state.score)\n\n    //   alert(\"Winner\");\n    //   this.setState({\n    //     player: this.state.players.sort(function (a, b) {\n    //       return 0.5 - Math.random();\n    //     }),\n    //     clickedPlayer: [],\n    //     score: 0\n    //   });\n    // }\n\n\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Jumbotron />\n        <div className=\"board\">\n          {this.state.players.map(player => (\n            <MemoryCard\n              imageClick={this.imageClick}\n              id={player.id}\n              key={player.id}\n              image={player.image}\n            />\n          ))}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}